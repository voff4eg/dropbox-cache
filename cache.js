// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var Client, cache, dropbox, tapinto, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  dropbox = require('dropbox');

  tapinto = require('tapinto');

  cache = require('memory-cache');

  _ = require('underscore');

  Client = (function(_super) {

    __extends(Client, _super);

    function Client(options) {
      this.options = options;
      Client.__super__.constructor.apply(this, arguments);
    }

    Client.prototype.readFile = function(path, options, callback) {
      var file;
      file = cache.get("" + (this.dropboxUid()) + ":" + path + ":file");
      if (file != null) {
        (callback || options)(null, file.content, file.stat, file.range);
        return false;
      }
      return function(error, content, stat, range) {
        if (error != null) return;
        return cache.put("" + (this.dropboxUid()) + ":" + path + ":file", {
          content: content,
          stat: stat,
          range: range
        });
      };
    };

    Client.prototype.readdir = function(path, options, callback) {
      var dir;
      dir = cache.get("" + (this.dropboxUid()) + ":" + path + ":dir");
      if (dir != null) {
        (callback || options)(null, dir.files, dir.dirstat, dir.filestats);
        return false;
      }
      return function(error, files, dirstat, filestats) {
        if (error != null) return;
        return cache.put("" + (this.dropboxUid()) + ":" + path + ":dir", {
          files: files,
          dirstat: dirstat,
          filestats: filestats
        });
      };
    };

    Client.prototype.stat = function(path, options, callback) {
      var stat;
      stat = cache.get("" + (this.dropboxUid()) + ":" + path + ":stat");
      if (stat != null) {
        (callback || options)(null, stat.stat, stat.filestats);
        return false;
      }
      return function(error, stat, filestats) {
        if (error != null) return;
        return cache.put("" + (this.dropboxUid()) + ":" + path + ":stat", {
          stat: stat,
          filestats: filestats
        });
      };
    };

    return Client;

  })(tapinto.Class(dropbox.Client));

  module.exports = _.extend({}, dropbox, {
    Client: Client
  });

}).call(this);
